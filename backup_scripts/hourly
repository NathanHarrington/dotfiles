#!/bin/bash
#
# Run rclone to synchronize to the various list of manually configured
# drives. This expects the following configuration:
#
# StorageService:/auto_backup/time_frame/
#
# Where StorageService is google drive, dropbox, back blaze b2, etc.
# auto_backup is a directory in the root folder, and hourly, daily,
# weekly are manually created folders.
#
# Create links to this script like:
# ln -s hourly weekly
# ln -s hourly daily
# ln -s hourly 
#
# Then in anacron, run the daily and weekly scripts accordingly. Each
# non-hourly mode will create a folder in the directory with the
# timestamp so you don't have to rely on dropbox's 50 or so version
# history.
#
# Hourly mode was created for synchronization with GUI clients like
# dropbox and spideroak. Ultimately you may want to go with a system
# like: https://raymii.org/s/articles/Set_up_your_own_truly_secure_\
# encrypted_shared_storage_aka_Dropbox_clone.html  For right now this
# system is designed to store tiny amounts of data, redundantly, for
# free. One of the main goals is to remove your configuration and data
# maintenance skills from the backup equation. Don't run your own VPS,
# don't setup an encrypted filesystem. Use full-system encryption in
# fedora, and these gpg cloud backups.
#
# Well that anacron description above was supposed to be what you wanted
# to work, but you cannot figure teh anacron config. Just go nuclear for
# now and do all the backups every 1 hour while the system is on. Then
# you'll have to go back in manually and delete files to save space, but
# it should take about every year or so before that becomes an issue. So
# that's back to crontab entries like:
# Run daily script every hour to ensure new file in timestamp directory
#
#SCRIPTS=/home/nharrington/projects/dotfiles/backup_scripts
#13 * * * * $SCRIPTS/encrypt_directory.sh >>$SCRIPTS/backup.log 2>&1
#14 * * * * $SCRIPTS/daily >>$SCRIPTS/backup.log 2>&1


# rclone remote names
declare -a dest=("wpdropbox" "wpgdrive" "wpbackblaze" "wponedrive")

RCLONE=/usr/sbin/rclone

HOSTNAME=$(hostname)
TAR_GPG_FILENAME="${HOSTNAME}_encrypted.tar.gpg"

SRC_FILENAME="$HOME/Documents/working_encrypted/$TAR_GPG_FILENAME"

SCRIPT_NAME=`basename "$0"`


for DST_TYPE in "${dest[@]}"
do
    LOCATION="/auto_backup/${SCRIPT_NAME}"

    # Only change the location name to include the timestamp if it's
    # daily or weekly.
    if [ "$SCRIPT_NAME" != "hourly" ]; then
        TIMESTAMP=`date`
        LOCATION="/auto_backup/${SCRIPT_NAME}/${TIMESTAMP}"
    fi

    # Prepend the bucket name for backblaze b2
    if [ "$DST_TYPE" == "wpbackblaze" ]; then
        echo "Back blaze bucket prepend"
        LOCATION="autobackupbucket${LOCATION}"
    fi

    # Perform the actual synchronization with rclone
    NEW_FILE=$DST_TYPE:$LOCATION/$TAR_GPG_FILENAME
    echo "$RCLONE sync $SRC_FILENAME $NEW_FILE"
    $RCLONE sync $SRC_FILENAME "$NEW_FILE"

done

